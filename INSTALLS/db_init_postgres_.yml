---
- name: DB Initialization for New Instance
  hosts: ansible-runner
  tasks:
    - name: Create DBA role
      community.postgresql.postgresql_query:
        login_host: "{{ target_db_instance }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        db: "{{ target_db_name }}"
        query: 
        - do $block$
          declare
             _missing bool;
          begin
              select (count(*) filter (where rolname = 'dba')) = 0 into strict _missing from pg_roles;
              if _missing then
                 create role dba CREATEDB CREATEROLE LOGIN;
                 grant rds_superuser to dba;
              end if
              ;
          end;
          $block$;

    - name: Create ansible_service_user
      community.postgresql.postgresql_user:
        login_host: "{{ target_db_instance }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        db: "{{ target_db_name }}"
        name: "ansible_service_user"
        password: "{{ ansible_service_password }}"    
      no_log: true

    - name: Create DBA/Admin Schema
      community.postgresql.postgresql_query:
       login_host: "{{ target_db_instance }}"
       login_user: "{{ db_username }}"
       login_password: "{{ db_password }}"
       db: "{{ target_db_name }}"
       query:
        - grant dba to YOURADMINUSER, ansible_service_user
        - create schema if not exists dba authorization dba 
        - revoke dba from YOURADMINUSER, ansible_service_user;

    - name: Create readonly and readwrite roles 
      community.postgresql.postgresql_query:
        login_host: "{{ target_db_instance }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        db: "{{ target_db_name }}"
        query:
        - do $block$
          declare
             _missing bool;
          begin
              select (count(*) filter (where rolname = 'readonly')) = 0 into strict _missing from pg_roles;
              if _missing then
                 create role readonly nologin;
              end if
              ;
          end;
          $block$;
        - do $block$
          declare
             _missing bool;
          begin
              select (count(*) filter (where rolname = 'readwrite')) = 0 into strict _missing from pg_roles;
              if _missing then
                 create role readwrite nologin;
              end if
              ;
          end;
          $block$;
        named_args:
          app_service_user: "{{ app_service_user }}"

    - name: Create Schema and Application login_user
      community.postgresql.postgresql_query:
        login_host: "{{ target_db_instance }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        db: "{{ target_db_name }}"
        query:
        - do $block$
          declare
              _missing bool;
          begin
              select (count(*) filter (where usename = '{{ app_service_user }}')) = 0 into strict _missing from pg_user;
              if _missing then
                  create user {{ app_service_user }} with password '{{ app_service_user_password }}';
                  grant  {{ app_service_user }} to dba;
                  grant {{ app_service_user }} to {{ db_username }};
              else
                  alter user {{ app_service_user }} with password '{{ app_service_user_password }}';
              end if
              ;
          end;
          $block$
          ;        
        - create schema if not exists {{ schema_name }} authorization {{ app_service_user }}
        - grant {{ app_service_user }} to YOURADMINUSER
        - grant {{ app_service_user }} to ansible_service_user
        - alter user {{ app_service_user }} set search_path to {{ schema_name }}
        named_args:
          app_service_user: "{{ app_service_user }}"
          app_service_user_password: "{{ app_service_user_password }}"

    - name: Rights for App Service User
      community.postgresql.postgresql_query:
        login_host: "{{ target_db_instance }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        db: "{{ target_db_name }}"
        query:
        - alter database "{{ target_db_name }}" owner to {{ app_service_user }}
        - grant connect on database "{{ target_db_name }}" to {{ app_service_user }}
        - grant usage on schema {{ schema_name }} to {{ app_service_user }}
        - grant create on database "{{ target_db_name }}" to {{ app_service_user }}
        - grant execute on all functions in schema {{ schema_name }} to {{ app_service_user }}
        - grant execute on all procedures in schema {{ schema_name }} to {{ app_service_user }}
        - grant all privileges on all sequences in schema {{ schema_name }} to {{ app_service_user }}
        - grant select, insert, update, truncate, delete on all tables in schema {{ schema_name }} to {{ app_service_user }}
        named_args:
          app_service_user: "{{ app_service_user }}"

    - name: Grant privileges to readonly and readwrite user
      community.postgresql.postgresql_query:
        login_host: "{{ target_db_instance }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        db: "{{ target_db_name }}"
        query:
        - grant usage on schema {{ schema_name }} to readonly, readwrite;
        - grant select on all tables in schema {{ schema_name }} to readonly, readwrite
        - grant insert, update, delete on all tables in schema {{ schema_name }} to readwrite
        - grant all privileges on all sequences in schema {{ schema_name }} to readwrite
        - grant execute on all functions in schema {{ schema_name }} to readwrite
  

    - name: Set default privileges for app_service_user and roles
      community.postgresql.postgresql_query:
        login_host: "{{ target_db_instance }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        db: "{{ target_db_name }}"
        query:
        - alter default privileges for user {{ app_service_user }} grant select on tables to readonly;
        - alter default privileges for user {{ app_service_user }} grant usage on sequences to readonly;
        - alter default privileges for user {{ app_service_user }} grant usage on types to readonly;
        - alter default privileges for user {{ app_service_user }} grant select,insert,update,delete on tables to readwrite
        - alter default privileges for user {{ app_service_user }} grant all privileges on sequences to readwrite
        - alter default privileges for user {{ app_service_user }} grant execute on functions to readwrite
        - alter default privileges for user {{ app_service_user }} grant usage on types to readwrite
        - grant {{ app_service_user }} to dba
        - revoke {{ app_service_user }} from YOURADMINUSER
        named_args:
          app_service_user: "{{ app_service_user }}"        
     
    - name: Create DBA/admin users 
      community.postgresql.postgresql_user:
        login_host: "{{ target_db_instance }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        db: "{{ target_db_name }}"
        name: "{{ item.name }}"
        password: "{{ item.password }}"    
      with_items:
      - { name: "randoneering_dba", password: "{{ randoneering_password }}"}
      no_log: true
      
    - name: Grant dba rights to DBA/admin users
      community.postgresql.postgresql_membership:
        login_host: "{{ target_db_instance }}"
        login_user: "{{ db_username }}"
        login_password: "{{ db_password }}"
        db: "{{ target_db_name }}"
        groups: "dba"
        target_role: "{{ item.name }}"
      with_items:
      - { name: "randoneering_dba"}
      - { name: "ansible_service_user"}